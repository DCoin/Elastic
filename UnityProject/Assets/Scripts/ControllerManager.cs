//------------------------------------------------------------------------------
// <auto-generated>
//     Denne kode blev oprettet ved hjælp af et værktøj.
//     Runtime-version:4.0.30319.18444
//
//     Ændringer af denne fil kan resultere i ukorrekt funktion, og ændringerne mistes, hvis
//     koden oprettes igen.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using InControl;


public class ControllerManager
{
	private const float ANALOG_THRESHOLD = 0.5f;

	/// <summary>
	/// Gets the jump input bool.
	/// </summary>
	/// <returns><c>true</c>, if analogue stick is moved beyond threshold, <c>false</c> otherwise.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static bool GetJumpInputBool(int controller, bool leftSide)
	{
		return (GetJumpInput(controller, leftSide) > ANALOG_THRESHOLD) ? true : false;
	}

	/// <summary>
	/// Gets the jump input as float.
	/// </summary>
	/// <returns>The jump input.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static float GetJumpInput(int controller, bool leftSide)
	{
		if (leftSide)
			return InputManager.Devices[controller].LeftStickY.Value; //TODO Returns -1 when heavy
		else 
			return InputManager.Devices[controller].RightStickY.Value;  //TODO Returns -1 when heavy
	}

	/// <summary>
	/// Gets the heavy input bool.
	/// </summary>
	/// <returns><c>true</c>, if analogue stick is moved beyond threshold, <c>false</c> otherwise.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static bool GetHeavyInputBool(int controller, bool leftSide)
	{
		return (GetHeavyInput(controller, leftSide) > ANALOG_THRESHOLD) ? true : false;
	}

	/// <summary>
	/// Gets the heavy input as float.
	/// </summary>
	/// <returns>The heavy input.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static float GetHeavyInput(int controller, bool leftSide)
	{
		if (leftSide)
			return -InputManager.Devices[controller].LeftStickY.Value;  //TODO Returns -1 when jumping
		else 
			return -InputManager.Devices[controller].RightStickY.Value;  //TODO Returns -1 when jumping
	}

	/// <summary>
	/// Gets if stick is held to the left.
	/// </summary>
	/// <returns><c>true</c>, if analogue stick is moved beyond threshold, <c>false</c> otherwise.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static bool GetLeftInputBool(int controller, bool leftSide)
	{
		return (GetHorizontalInput(controller, leftSide) < -ANALOG_THRESHOLD) ? true : false;
	}

	public static bool GetHeavyBoolDown(int controller, bool leftSide) {
		Debug.Log ("State = " + InputManager.Devices [controller].LeftStickY.WasPressed + " Value = " + InputManager.Devices [controller].LeftStickY.Value); // TODO DELETE
		return InputManager.Devices [controller].LeftStickY.WasPressed; // TODO doesn't work.
	}

	/// <summary>
	/// Gets if stick is held to the right.
	/// </summary>
	/// <returns><c>true</c>, if analogue stick is moved beyond threshold, <c>false</c> otherwise.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static bool GetRightInputBool(int controller, bool leftSide)
	{
		return (GetHorizontalInput(controller, leftSide) > ANALOG_THRESHOLD) ? true : false;
	}

	/// <summary>
	/// Gets the horizontal value of the control stick
	/// </summary>
	/// <returns>The x axis value.</returns>
	/// <param name="controller">Controller index.</param>
	/// <param name="leftSide">Set to <c>true</c> if left side of controller.</param>
	public static float GetHorizontalInput(int controller, bool leftSide)
	{
		if (leftSide)
			return InputManager.Devices[controller].LeftStickX.Value;
		else 
			return InputManager.Devices[controller].RightStickX.Value;
	}


}

